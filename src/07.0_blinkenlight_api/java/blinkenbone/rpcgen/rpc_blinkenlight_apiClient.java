/*
 * Automatically generated by jrpcgen 1.0.7 on 20.02.16 08:08
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package blinkenbone.rpcgen;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

/**
 * The class <code>rpc_blinkenlight_apiClient</code> implements the client stub proxy
 * for the BLINKENLIGHTD remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class rpc_blinkenlight_apiClient extends OncRpcClientStub {

    /**
     * Constructs a <code>rpc_blinkenlight_apiClient</code> client stub proxy object
     * from which the BLINKENLIGHTD remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_apiClient(InetAddress host, int protocol)
           throws OncRpcException, IOException {
        super(host, rpc_blinkenlight_api.BLINKENLIGHTD, 1, 0, protocol);
    }

    /**
     * Constructs a <code>rpc_blinkenlight_apiClient</code> client stub proxy object
     * from which the BLINKENLIGHTD remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_apiClient(InetAddress host, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, rpc_blinkenlight_api.BLINKENLIGHTD, 1, port, protocol);
    }

    /**
     * Constructs a <code>rpc_blinkenlight_apiClient</code> client stub proxy object
     * from which the BLINKENLIGHTD remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_apiClient(OncRpcClient client)
           throws OncRpcException, IOException {
        super(client);
    }

    /**
     * Constructs a <code>rpc_blinkenlight_apiClient</code> client stub proxy object
     * from which the BLINKENLIGHTD remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_apiClient(InetAddress host, int program, int version, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, 0, protocol);
    }

    /**
     * Constructs a <code>rpc_blinkenlight_apiClient</code> client stub proxy object
     * from which the BLINKENLIGHTD remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_apiClient(InetAddress host, int program, int version, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, port, protocol);
    }

    /**
     * Call remote procedure RPC_BLINKENLIGHT_API_GETINFO_1.
     * @return Result from remote procedure call (of type rpc_blinkenlight_api_getinfo_res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_api_getinfo_res RPC_BLINKENLIGHT_API_GETINFO_1()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        rpc_blinkenlight_api_getinfo_res result$ = new rpc_blinkenlight_api_getinfo_res();
        client.call(rpc_blinkenlight_api.RPC_BLINKENLIGHT_API_GETINFO_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_BLINKENLIGHT_API_GETPANELINFO_1.
     * @param arg1 parameter (of type int) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_blinkenlight_api_getpanelinfo_res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_api_getpanelinfo_res RPC_BLINKENLIGHT_API_GETPANELINFO_1(int arg1)
           throws OncRpcException, IOException {
        XdrInt args$ = new XdrInt(arg1);
        rpc_blinkenlight_api_getpanelinfo_res result$ = new rpc_blinkenlight_api_getpanelinfo_res();
        client.call(rpc_blinkenlight_api.RPC_BLINKENLIGHT_API_GETPANELINFO_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_BLINKENLIGHT_API_GETCONTROLINFO_1.
     * @param arg1 parameter (of type int) to the remote procedure call.
     * @param arg2 parameter (of type int) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_blinkenlight_api_getcontrolinfo_res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_api_getcontrolinfo_res RPC_BLINKENLIGHT_API_GETCONTROLINFO_1(int arg1, int arg2)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public int arg1;
            public int arg2;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                xdr.xdrEncodeInt(arg1);
                xdr.xdrEncodeInt(arg2);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.arg1 = arg1;
        args$.arg2 = arg2;
        rpc_blinkenlight_api_getcontrolinfo_res result$ = new rpc_blinkenlight_api_getcontrolinfo_res();
        client.call(rpc_blinkenlight_api.RPC_BLINKENLIGHT_API_GETCONTROLINFO_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_BLINKENLIGHT_API_SETPANEL_CONTROLVALUES_1.
     * @param arg1 parameter (of type int) to the remote procedure call.
     * @param valuelist parameter (of type rpc_blinkenlight_api_controlvalues_struct) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_blinkenlight_api_setpanel_controlvalues_res).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_api_setpanel_controlvalues_res RPC_BLINKENLIGHT_API_SETPANEL_CONTROLVALUES_1(int arg1, rpc_blinkenlight_api_controlvalues_struct valuelist)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public int arg1;
            public rpc_blinkenlight_api_controlvalues_struct valuelist;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                xdr.xdrEncodeInt(arg1);
                valuelist.xdrEncode(xdr);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.arg1 = arg1;
        args$.valuelist = valuelist;
        rpc_blinkenlight_api_setpanel_controlvalues_res result$ = new rpc_blinkenlight_api_setpanel_controlvalues_res();
        client.call(rpc_blinkenlight_api.RPC_BLINKENLIGHT_API_SETPANEL_CONTROLVALUES_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_BLINKENLIGHT_API_GETPANEL_CONTROLVALUES_1.
     * @param arg1 parameter (of type int) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_blinkenlight_api_controlvalues_struct).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_blinkenlight_api_controlvalues_struct RPC_BLINKENLIGHT_API_GETPANEL_CONTROLVALUES_1(int arg1)
           throws OncRpcException, IOException {
        XdrInt args$ = new XdrInt(arg1);
        rpc_blinkenlight_api_controlvalues_struct result$ = new rpc_blinkenlight_api_controlvalues_struct();
        client.call(rpc_blinkenlight_api.RPC_BLINKENLIGHT_API_GETPANEL_CONTROLVALUES_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_PARAM_GET_1.
     * @param cmd_get parameter (of type rpc_param_cmd_get_struct) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_param_result_struct).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_param_result_struct RPC_PARAM_GET_1(rpc_param_cmd_get_struct cmd_get)
           throws OncRpcException, IOException {
        rpc_param_result_struct result$ = new rpc_param_result_struct();
        client.call(rpc_blinkenlight_api.RPC_PARAM_GET_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, cmd_get, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_PARAM_SET_1.
     * @param cmd_set parameter (of type rpc_param_cmd_set_struct) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_param_result_struct).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_param_result_struct RPC_PARAM_SET_1(rpc_param_cmd_set_struct cmd_set)
           throws OncRpcException, IOException {
        rpc_param_result_struct result$ = new rpc_param_result_struct();
        client.call(rpc_blinkenlight_api.RPC_PARAM_SET_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, cmd_set, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_TEST_DATA_TO_SERVER_1.
     * @param data parameter (of type rpc_test_data_struct) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_test_cmdstatus_struct).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_test_cmdstatus_struct RPC_TEST_DATA_TO_SERVER_1(rpc_test_data_struct data)
           throws OncRpcException, IOException {
        rpc_test_cmdstatus_struct result$ = new rpc_test_cmdstatus_struct();
        client.call(rpc_blinkenlight_api.RPC_TEST_DATA_TO_SERVER_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, data, result$);
        return result$;
    }

    /**
     * Call remote procedure RPC_TEST_DATA_FROM_SERVER_1.
     * @param data parameter (of type rpc_test_cmdstatus_struct) to the remote procedure call.
     * @return Result from remote procedure call (of type rpc_test_data_struct).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public rpc_test_data_struct RPC_TEST_DATA_FROM_SERVER_1(rpc_test_cmdstatus_struct data)
           throws OncRpcException, IOException {
        rpc_test_data_struct result$ = new rpc_test_data_struct();
        client.call(rpc_blinkenlight_api.RPC_TEST_DATA_FROM_SERVER_1, rpc_blinkenlight_api.BLINKENLIGHTD_VERS, data, result$);
        return result$;
    }

}
// End of rpc_blinkenlight_apiClient.java
