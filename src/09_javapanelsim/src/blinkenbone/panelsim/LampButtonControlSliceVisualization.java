/* LampButtonControlSliceVisualization.java: a single bit lamp combined with a button.

   Copyright (c) 2014-2016, Joerg Hoppe
   j_hoppe@t-online.de, www.retrocmp.com

   Permission is hereby granted, free of charge, to any person obtaining a
   copy of this software and associated documentation files (the "Software"),
   to deal in the Software without restriction, including without limitation
   the rights to use, copy, modify, merge, publish, distribute, sublicense,
   and/or sell copies of the Software, and to permit persons to whom the
   Software is furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
   JOERG HOPPE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
   IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


   15-Oct-2014  JH      created

   Combining images for 1 Bit:
   - Button off & up
   - Button off & pressed down
   - Button on & up
   - Button on & down

  The 4 images are "TwoStateControVisualizations"

  LampButtons are not "dimmable":
  not necessary, because they never switch in high speed, like the LEDs do!
 */

package blinkenbone.panelsim;

import blinkenbone.panelsim.panelsimKI10.PanelKI10Control;
import blinkenbone.rpcgen.rpc_blinkenlight_api;

public class LampButtonControlSliceVisualization extends ControlSliceVisualization {

	String name;
	int bitpos;
	// public PanelKI10Control ki10c; // which lamp&button?

	public static final int stateButtonUpLampOff = 0;
	public static final int stateButtonUpLampOn = 1;
	public static final int stateButtonDownLampOff = 2;
	public static final int stateButtonDownLampOn = 3; // maxstate, used in
														// selftest!

	String downOn_imageFilename;
	String downOff_imageFilename;
	String upOn_imageFilename;
	String upOff_imageFilename;

	/*
	 * 1 Bit eine LampButton Leiste besteht 4 ZustÃ¤nden
	 */
	public LampButtonControlSliceVisualization(
			String name,
			int bitpos,
			PanelKI10Control ki10c, // which lamp&button?
			// argument order ALPHABETICAL
			// "down_off, donw_on, up_off, up_on"
			// (calls are generated by code generator

			String downOff_imageFilename, String downOn_imageFilename,
			String upOff_imageFilename, String upOn_imageFilename) {

		// click on image -> button control must be notified (not lamp)
		// so: link visualization auf den "input" !!!
		super(name + "." + bitpos, ki10c, ki10c.inputcontrol, bitpos);

		this.name = name;
		this.bitpos = bitpos;

		this.upOff_imageFilename = upOff_imageFilename;
		this.downOff_imageFilename = downOff_imageFilename;
		this.upOn_imageFilename = upOn_imageFilename;
		this.downOn_imageFilename = downOn_imageFilename;
	}

	@Override
	public void loadStateImages() {
		// load images of the 4 lamp/button state combinations.
		this.addStateImage(downOn_imageFilename, stateButtonDownLampOn);
		this.addStateImage(downOff_imageFilename, stateButtonDownLampOff);
		this.addStateImage(upOn_imageFilename, stateButtonUpLampOn);
		this.addStateImage(upOff_imageFilename, stateButtonUpLampOff);
	}

	@Override
	public void fixupStateImages() {
	}

}
