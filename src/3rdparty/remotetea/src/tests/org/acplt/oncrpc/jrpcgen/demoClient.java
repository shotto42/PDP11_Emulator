/*
 * Automatically generated by jrpcgen 1.0.7 on 29.05.07 21:34
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package tests.org.acplt.oncrpc.jrpcgen;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

/**
 * The class <code>demoClient</code> implements the client stub proxy
 * for the DEMO remote program. It provides method stubs
 * which, when called, in turn call the appropriate remote method (procedure).
 */
public class demoClient extends OncRpcClientStub {

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(InetAddress host, int protocol)
           throws OncRpcException, IOException {
        super(host, demo.DEMO, 2, 0, protocol);
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(InetAddress host, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, demo.DEMO, 2, port, protocol);
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param client ONC/RPC client connection object implementing a particular
     *   protocol.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(OncRpcClient client)
           throws OncRpcException, IOException {
        super(client);
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(InetAddress host, int program, int version, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, 0, protocol);
    }

    /**
     * Constructs a <code>demoClient</code> client stub proxy object
     * from which the DEMO remote program can be accessed.
     * @param host Internet address of host where to contact the remote program.
     * @param program Remote program number.
     * @param version Remote program version number.
     * @param port Port number at host where the remote program can be reached.
     * @param protocol {@link org.acplt.oncrpc.OncRpcProtocols Protocol} to be
     *   used for ONC/RPC calls.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public demoClient(InetAddress host, int program, int version, int port, int protocol)
           throws OncRpcException, IOException {
        super(host, program, version, port, protocol);
    }

    /**
     * Call remote procedure NULL_1.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NULL_1()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrVoid result$ = XdrVoid.XDR_VOID;
        client.call(demo.NULL_1, demo.FIRST_DEMO_VERSION, args$, result$);
    }

    /**
     * Call remote procedure echo_1.
     * @param arg1 parameter (of type String) to the remote procedure call.
     * @return Result from remote procedure call (of type String).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public String echo_1(String arg1)
           throws OncRpcException, IOException {
        XdrString args$ = new XdrString(arg1);
        XdrString result$ = new XdrString();
        client.call(demo.echo_1, demo.FIRST_DEMO_VERSION, args$, result$);
        return result$.stringValue();
    }

    /**
     * Call remote procedure concat_1.
     * @param arg1 parameter (of type STRINGVECTOR) to the remote procedure call.
     * @return Result from remote procedure call (of type String).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public String concat_1(STRINGVECTOR arg1)
           throws OncRpcException, IOException {
        XdrString result$ = new XdrString();
        client.call(demo.concat_1, demo.FIRST_DEMO_VERSION, arg1, result$);
        return result$.stringValue();
    }

    /**
     * Call remote procedure checkfoo_1.
     * @param arg1 parameter (of type ENUMFOO) to the remote procedure call.
     * @return Result from remote procedure call (of type boolean).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public boolean checkfoo_1(int arg1)
           throws OncRpcException, IOException {
        XdrInt args$ = new XdrInt(arg1);
        XdrBoolean result$ = new XdrBoolean();
        client.call(demo.checkfoo_1, demo.FIRST_DEMO_VERSION, args$, result$);
        return result$.booleanValue();
    }

    /**
     * Call remote procedure foo_1.
     * @return Result from remote procedure call (of type ENUMFOO).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public int foo_1()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrInt result$ = new XdrInt();
        client.call(demo.foo_1, demo.FIRST_DEMO_VERSION, args$, result$);
        return result$.intValue();
    }

    /**
     * Call remote procedure ll_1.
     * @param arg1 parameter (of type LINKEDLIST) to the remote procedure call.
     * @return Result from remote procedure call (of type LINKEDLIST).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LINKEDLIST ll_1(LINKEDLIST arg1)
           throws OncRpcException, IOException {
        LINKEDLIST result$ = new LINKEDLIST();
        client.call(demo.ll_1, demo.FIRST_DEMO_VERSION, arg1, result$);
        return result$;
    }

    /**
     * Call remote procedure readSomeResult_1.
     * @return Result from remote procedure call (of type SOMERESULT).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public SOMERESULT readSomeResult_1()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        SOMERESULT result$ = new SOMERESULT();
        client.call(demo.readSomeResult_1, demo.FIRST_DEMO_VERSION, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure NULL_2.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void NULL_2()
           throws OncRpcException, IOException {
        XdrVoid args$ = XdrVoid.XDR_VOID;
        XdrVoid result$ = XdrVoid.XDR_VOID;
        client.call(demo.NULL_2, demo.SECOND_DEMO_VERSION, args$, result$);
    }

    /**
     * Call remote procedure cat_2.
     * @param arg1 parameter (of type String) to the remote procedure call.
     * @param arg2 parameter (of type String) to the remote procedure call.
     * @return Result from remote procedure call (of type String).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public String cat_2(String arg1, String arg2)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public String arg1;
            public String arg2;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                xdr.xdrEncodeString(arg1);
                xdr.xdrEncodeString(arg2);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.arg1 = arg1;
        args$.arg2 = arg2;
        XdrString result$ = new XdrString();
        client.call(demo.cat_2, demo.SECOND_DEMO_VERSION, args$, result$);
        return result$.stringValue();
    }

    /**
     * Call remote procedure cat3_2.
     * @param one parameter (of type String) to the remote procedure call.
     * @param two parameter (of type String) to the remote procedure call.
     * @param three parameter (of type String) to the remote procedure call.
     * @return Result from remote procedure call (of type String).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public String cat3_2(String one, String two, String three)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public String one;
            public String two;
            public String three;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                xdr.xdrEncodeString(one);
                xdr.xdrEncodeString(two);
                xdr.xdrEncodeString(three);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.one = one;
        args$.two = two;
        args$.three = three;
        XdrString result$ = new XdrString();
        client.call(demo.cat3_2, demo.SECOND_DEMO_VERSION, args$, result$);
        return result$.stringValue();
    }

    /**
     * Call remote procedure checkfoo_2.
     * @param foo parameter (of type ENUMFOO) to the remote procedure call.
     * @return Result from remote procedure call (of type String).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public String checkfoo_2(int foo)
           throws OncRpcException, IOException {
        XdrInt args$ = new XdrInt(foo);
        XdrString result$ = new XdrString();
        client.call(demo.checkfoo_2, demo.SECOND_DEMO_VERSION, args$, result$);
        return result$.stringValue();
    }

    /**
     * Call remote procedure llcat_2.
     * @param l1 parameter (of type LINKEDLIST) to the remote procedure call.
     * @param l2 parameter (of type LINKEDLIST) to the remote procedure call.
     * @return Result from remote procedure call (of type LINKEDLIST).
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public LINKEDLIST llcat_2(LINKEDLIST l1, LINKEDLIST l2)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public LINKEDLIST l1;
            public LINKEDLIST l2;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                l1.xdrEncode(xdr);
                l2.xdrEncode(xdr);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.l1 = l1;
        args$.l2 = l2;
        LINKEDLIST result$ = new LINKEDLIST();
        client.call(demo.llcat_2, demo.SECOND_DEMO_VERSION, args$, result$);
        return result$;
    }

    /**
     * Call remote procedure test_2.
     * @param a parameter (of type String) to the remote procedure call.
     * @param b parameter (of type ENUMFOO) to the remote procedure call.
     * @param c parameter (of type ENUMFOO) to the remote procedure call.
     * @param d parameter (of type int) to the remote procedure call.
     * @throws OncRpcException if an ONC/RPC error occurs.
     * @throws IOException if an I/O error occurs.
     */
    public void test_2(String a, int b, int c, int d)
           throws OncRpcException, IOException {
        class XdrAble$ implements XdrAble {
            public String a;
            public int b;
            public int c;
            public int d;
            public void xdrEncode(XdrEncodingStream xdr)
                throws OncRpcException, IOException {
                xdr.xdrEncodeString(a);
                xdr.xdrEncodeInt(b);
                xdr.xdrEncodeInt(c);
                xdr.xdrEncodeInt(d);
            }
            public void xdrDecode(XdrDecodingStream xdr)
                throws OncRpcException, IOException {
            }
        };
        XdrAble$ args$ = new XdrAble$();
        args$.a = a;
        args$.b = b;
        args$.c = c;
        args$.d = d;
        XdrVoid result$ = XdrVoid.XDR_VOID;
        client.call(demo.test_2, demo.SECOND_DEMO_VERSION, args$, result$);
    }

}
// End of demoClient.java
